<?php
/**
 * PaymentLinkApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Conekta
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Conekta\Test\Api;

use Conekta\Api\PaymentLinkApi;
use \Conekta\Configuration;
use \Conekta\ApiException;
use Conekta\Model\Checkout;
use Conekta\Model\EmailCheckoutRequest;
use Conekta\Model\SmsCheckoutRequest;
use \Conekta\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * PaymentLinkApiTest Class Doc Comment
 *
 * @category Class
 * @package  Conekta
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentLinkApiTest extends TestCase
{

    protected static PaymentLinkApi $apiInstance;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $config = Configuration::getDefaultConfiguration()->setHost(BaseTest::$host);
        self::$apiInstance = new PaymentLinkApi(null, $config);
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for cancelCheckout
     *
     * Cancel Payment Link.
     *
     */
    public function testCancelCheckout()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->cancelCheckout('id', $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for createCheckout
     *
     * Create Unique Payment Link.
     *
     */
    public function testCreateCheckout()
    {
        $this->markTestIncomplete('Not implemented');
        $accept_language = 'es';
        $rq = new Checkout();
        $rq->setType('PaymentLink');
        $rq->setRecurrent(false);
        $result = self::$apiInstance->createCheckout($rq, $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for emailCheckout
     *
     * Send an email.
     *
     */
    public function testEmailCheckout()
    {
        $accept_language = 'es';
        $rq = new EmailCheckoutRequest([
            'email' => 'test@test.com'
        ]);
        $result = self::$apiInstance->emailCheckout('id', $rq, $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for getCheckout
     *
     * Get a payment link by ID.
     *
     */
    public function testGetCheckout()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->getCheckout('id', $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for getCheckouts
     *
     * Get a list of payment links.
     *
     */
    public function testGetCheckouts()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->getCheckouts($accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for smsCheckout
     *
     * Send an sms.
     *
     */
    public function testSmsCheckout()
    {
        $accept_language = 'es';
        $rq = new SmsCheckoutRequest([
            'phonenumber' => '55454545454'
        ]);
        $result = self::$apiInstance->smsCheckout('id', $rq, $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }
}
