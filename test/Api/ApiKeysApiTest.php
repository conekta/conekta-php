<?php
/**
 * ApiKeysApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Conekta
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Conekta\Test\Api;

use Conekta\Api\ApiKeysApi;
use \Conekta\Configuration;
use \Conekta\ApiException;
use Conekta\Model\ApiKeyRequest;
use Conekta\Model\ApiKeyUpdateRequest;
use \Conekta\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ApiKeysApiTest Class Doc Comment
 *
 * @category Class
 * @package  Conekta
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ApiKeysApiTest extends TestCase
{

    protected static ApiKeysApi $apiInstance;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $config = Configuration::getDefaultConfiguration()->setHost(BaseTest::$host);
        self::$apiInstance = new ApiKeysApi(null, $config);
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createApiKey
     *
     * Create Api Key.
     *
     */
    public function testCreateApiKey()
    {
        $accept_language = 'es';
        $rq = new ApiKeyRequest();
        $result = self::$apiInstance->createApiKey($rq, $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for deleteApiKey
     *
     * Delete Api Key.
     *
     */
    public function testDeleteApiKey()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->deleteApiKey('64625cc9f3e02c00163f5e4d', $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for getApiKey
     *
     * Get Api Key.
     *
     */
    public function testGetApiKey()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->getApiKey('64625cc9f3e02c00163f5e4d', $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for getApiKeys
     *
     * Get list of Api Keys.
     *
     */
    public function testGetApiKeys()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->getApiKeys($accept_language, null, 20);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for updateApiKey
     *
     * Update Api Key.
     *
     */
    public function testUpdateApiKey()
    {
        $accept_language = 'es';
        $rq = new ApiKeyUpdateRequest();
        $result = self::$apiInstance->updateApiKey('64625cc9f3e02c00163f5e4d', $accept_language, $rq);
        $this->assertNotEmpty($result, 'expected not empty result');
    }
}
