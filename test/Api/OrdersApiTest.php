<?php
/**
 * OrdersApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Conekta
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Conekta\Test\Api;

use Conekta\Api\OrdersApi;
use \Conekta\Configuration;
use \Conekta\ApiException;
use Conekta\Model\OrderRefundRequest;
use Conekta\Model\OrderRequest;
use Conekta\Model\OrderResponse;
use Conekta\Model\OrderUpdateRequest;
use \Conekta\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OrdersApiTest Class Doc Comment
 *
 * @category Class
 * @package  Conekta
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OrdersApiTest extends TestCase
{

    protected static OrdersApi $apiInstance;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $config = Configuration::getDefaultConfiguration()->setHost(BaseTest::$host);
        self::$apiInstance = new OrdersApi(null, $config);
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for cancelOrder
     *
     * Cancel Order.
     *
     */
    public function testCancelOrder()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->cancelOrder('ord_2tqaGQYZyvBsMKEgs', $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for createOrder
     *
     * Create order.
     *
     */
    public function testCreateOrder()
    {
        $accept_language = 'es';
        $rq = new OrderRequest([
            'currency' => 'MXN'
        ]);
        $result = self::$apiInstance->createOrder($rq, $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for getOrderById
     *
     * Get Order.
     *
     */
    public function testGetOrderById()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->getOrderById('id', $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for getOrders
     *
     * Get a list of Orders.
     *
     */
    public function testGetOrders()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->getOrders($accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for orderCancelRefund
     *
     * Cancel Refund.
     *
     */
    public function testOrderCancelRefund()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->orderCancelRefund('id','id', $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for orderRefund
     *
     * Refund Order.
     *
     */
    public function testOrderRefund()
    {
        $accept_language = 'es';
        $rq = new OrderRefundRequest([
            'amount' => 100
        ]);
        $result = self::$apiInstance->orderRefund('id', $rq, $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for ordersCreateCapture
     *
     * Capture Order.
     *
     */
    public function testOrdersCreateCapture()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->ordersCreateCapture('id', $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for updateOrder
     *
     * Update Order.
     *
     */
    public function testUpdateOrder()
    {
        $accept_language = 'es';
        $rq = new OrderUpdateRequest([
            'currency' => 'MXN'
        ]);
        $result = self::$apiInstance->updateOrder('id', $rq, $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }
}
