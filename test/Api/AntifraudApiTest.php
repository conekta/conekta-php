<?php
/**
 * AntifraudApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Conekta
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Conekta\Test\Api;

use \Conekta\Api\AntifraudApi;
use \Conekta\Configuration;
use \Conekta\ApiException;
use Conekta\Model\CreateRiskRulesData;
use \Conekta\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * AntifraudApiTest Class Doc Comment
 *
 * @category Class
 * @package  Conekta
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AntifraudApiTest extends TestCase
{

    protected static AntifraudApi $apiInstance;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $config = Configuration::getDefaultConfiguration()->setHost(BaseTest::$host);
        self::$apiInstance = new AntifraudApi(null, $config);
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createRuleBlacklist
     *
     * Create blacklisted rule.
     *
     */
    public function testCreateRuleBlacklist()
    {
        $accept_language = 'es';
        $rq = new CreateRiskRulesData();
        $result = self::$apiInstance->createRuleBlacklist($rq, $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for createRuleWhitelist
     *
     * Create whitelisted rule.
     *
     */
    public function testCreateRuleWhitelist()
    {
        $accept_language = 'es';
        $rq = new CreateRiskRulesData();
        $result = self::$apiInstance->createRuleWhitelist($accept_language, $rq);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for deleteRuleBlacklist
     *
     * Delete blacklisted rule.
     *
     */
    public function testDeleteRuleBlacklist()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->deleteRuleBlacklist('618c3f2fdb8b8da9be376afe', $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for deleteRuleWhitelist
     *
     * Delete whitelisted rule.
     *
     */
    public function testDeleteRuleWhitelist()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->deleteRuleWhitelist('618c3f2fdb8b8da9be376afe', $accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for getRuleBlacklist
     *
     * Get list of blacklisted rules.
     *
     */
    public function testGetRuleBlacklist()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->getRuleBlacklist($accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }

    /**
     * Test case for getRuleWhitelist
     *
     * Get a list of whitelisted rules.
     *
     */
    public function testGetRuleWhitelist()
    {
        $accept_language = 'es';
        $result = self::$apiInstance->getRuleWhitelist($accept_language);
        $this->assertNotEmpty($result, 'expected not empty result');
    }
}
