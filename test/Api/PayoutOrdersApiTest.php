<?php
/**
 * PayoutOrdersApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Conekta
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Conekta API
 *
 * Conekta sdk
 *
 * The version of the OpenAPI document: 2.1.0
 * Contact: engineering@conekta.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Conekta\Test\Api;

use Conekta\Api\PayoutOrdersApi;
use \Conekta\Configuration;
use \Conekta\ApiException;
use Conekta\Model\PayoutOrder;
use PHPUnit\Framework\TestCase;

/**
 * PayoutOrdersApiTest Class Doc Comment
 *
 * @category Class
 * @package  Conekta
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PayoutOrdersApiTest extends TestCase
{

    protected static PayoutOrdersApi $apiInstance;

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
        $config = Configuration::getDefaultConfiguration()->setHost(BaseTest::$host)->setAccessToken("key_xxx");
        self::$apiInstance = new PayoutOrdersApi(null, $config);
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createPayoutOrder
     *
     * Create payout order.
     *
     * @throws ApiException
     */
    public function testCreatePayoutOrder()
    {
        $request = new PayoutOrder(
            [
                "currency" => "MXN",
                "amount" => 3000,
                "description" => "Payout order description",
                "reference_id" => "reference_id",
                "payment_method" => "card",
                "payment_method_id" => "pm_3fae3e3e3e3e3e3e3e3e3e3e",
                "customer" => [
                    "name" => "John Doe",
                    "email" => "",
                ]
            ]
        );
        $result = self::$apiInstance->createPayoutOrder($request)    ;

        $this->assertNotEmpty($result, 'expected not empty result');
        $this->assertEquals('MXN', $result->getCurrency());
        $this->assertEquals(3000, $result->getAmount());

    }

    /**
     * Test case for getPayoutOrderById
     *
     * Get Payout Order.
     *
     */
    public function testGetPayoutOrderById()
    {
        $result = self::$apiInstance->getPayoutOrderById('f2654d66-d740-457a-9a8c-f96b5196f44e');

        $this->assertNotEmpty($result, 'expected not empty result');
        $this->assertEquals('f2654d66-d740-457a-9a8c-f96b5196f44e', $result->getId());
    }

    /**
     * Test case for getPayoutOrders
     *
     * Get a list of Payout Orders.
     *
     */
    public function testGetPayoutOrders()
    {
        $result = self::$apiInstance->getPayoutOrders();

        $this->assertNotEmpty($result, 'expected not empty result');
        $this->assertIsArray($result->getData());
    }
}
